doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Meeting Room
    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
      }

      .container {
        max-width: 800px;
        margin: 50px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
      }

      .buttons {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
      }

      .button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .button:hover {
        background-color: #0056b3;
      }

      .profile-card {
        background-color: #def2e5;
        margin-top: 20px;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .profile-card h3 {
        margin-top: 20px;
      }

      .profile-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
      }

  body
    .container
      .header
        h1 Meeting Room
      .main-host-content
        .profile-card
          h3 Main Host
          p Host details and controls...
      .other-hosts-content.profile-grid
        // Other hosts' profile cards will be injected here
      .buttons
        button.button#mic-button Mic
        button.button#end-button End
        button.button#hand-raise-button âœ‹

  script.
    // Function to inject HTML content for main host
    function injectMainHostContent() {
      const mainHostContent = document.querySelector('.main-host-content');
      // Inject your HTML content here for the main host
      // Example:
       mainHostContent.innerHTML = `
         <div class="profile-card">
           <h3>Main Host</h3>
         </div>
       `;
    }

    function fetchUsersData() {
      // Replace 'https://example.com/api/users' with your actual API endpoint
      fetch('https://dummyjson.com/users?limit=5')
        .then(response => response.json())
        .then(data => {
          console.log('j',data)
          // Inject profile cards HTML for each user
          injectProfileCards(data);
        })
        .catch(error => console.error('Error fetching users data:', error));
    }

    // Function to inject profile cards HTML for each user
    function injectProfileCards(users) {
      const otherHostsContent = document.querySelector('.other-hosts-content');
      const profileGrid = document.createElement('div');
      profileGrid.classList.add('profile-grid'); // Add profile grid class
      users.users.forEach(user => {
        const profileCard = document.createElement('div');
        profileCard.classList.add('profile-card');
        profileCard.innerHTML = `
          <h3>${user.firstName}</h3>
        `;
        profileGrid.appendChild(profileCard);
      });
      otherHostsContent.appendChild(profileGrid);
    }

    // Call functions to inject HTML content when the page loads
    window.addEventListener('DOMContentLoaded', () => {
      injectMainHostContent();
      fetchUsersData();
    });

        // Generate a unique identifier for the client
        const clientId = Math.random().toString(36).substring(7);

        // Establish WebSocket connection
        const ws = new WebSocket('ws://localhost:3000');

        // WebSocket event listeners
        ws.addEventListener('open', () => {
        console.log('WebSocket connection established.');
        // Send the client ID to the server
        ws.send(JSON.stringify({ type: 'clientId', clientId }));
        });

        ws.addEventListener('message', event => {
        const message = JSON.parse(event.data);
        console.log('Message received:', message);
        // If the server sends back the client ID, print it
        if (message.type === 'clientId') {
            console.log('Socket ID:', message.clientId);
        }
        });

        ws.addEventListener('close', () => {
        console.log('WebSocket connection closed.');
        });
