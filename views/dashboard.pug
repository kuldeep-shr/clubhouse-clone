doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Dashboard
    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
      }
      header {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 10px;
        background-color: #f0f0f0;
      }
      .notification-bell {
        position: relative;
        margin-right: 20px;
        cursor: pointer;
      }
      .notification-dot {
        position: absolute;
        top: 0;
        right: 0;
        width: 8px;
        height: 8px;
        background-color: red;
        border-radius: 50%;
        display: none; /* Initially hide the dot */
      }
      .notification-count {
        position: absolute;
        top: -5px; /* Adjusted position */
        right: -5px; /* Adjusted position */
        background-color: red;
        color: white;
        border-radius: 50%;
        padding: 3px;
        font-size: 10px;
        min-width: 10px; /* Ensures the circle is always visible */
        text-align: center; /* Center the count */
      }
      .notification-count.active {
        display: block;
      }
      .profile-button {
        cursor: pointer;
      }
      main {
        padding: 20px;
      }
      .room-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        grid-gap: 20px;
      }
      .room-box {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }
      footer {
        text-align: center;
        padding: 20px;
      }
      #start-room-button {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      #start-room-button:hover {
        background-color: #0056b3;
      }
      .profile-details {
        position: absolute;
        top: 60px;
        right: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: none;
      }
      .profile-details.active {
        display: block;
      }
      .notification-card {
        position: absolute;
        top: 40px;
        right: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: none;
        max-width: 300px; /* Wrapped notification card */
        word-wrap: break-word; /* Wrapped notification card */
      }
      .notification-card.active {
        display: block;
      }
      .notification-item {
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
      }

  body
    header
      .notification-bell(onclick="toggleNotificationCard()")
        // Placeholder bell icon
        i.fa.fa-bell
        span.notification-dot
        span.notification-count#notificationCount
      .profile-button(onclick="toggleProfileDetails()")
        // Placeholder profile button icon
        i.fa.fa-user
      .profile-details#profileDetails
        // Placeholder profile details
        h3 User Profile
        p Name: John Doe
        p Email: john@example.com
        p Role: Admin
      .notification-card#notificationCard
        h3 Notification
        div(id="notificationMessage")
          // Notifications will appear here

    main
      h1 Welcome to Your Dashboard
      .room-container
        // Placeholder room boxes

    footer
      button#start-room-button(onclick="openNewRoomPug()") Start a Room

  script.
    // Extract token from localStorage
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('userData');
    const parsedUserDetails=JSON.parse(user)

    console.log("token from local vv",parsedUserDetails)

    
    // Example room data
    const rooms = [
      { name: "Room 1", description: "Description for Room 1" },
      { name: "Room 2", description: "Description for Room 2" },
      { name: "Room 3", description: "Description for Room 3" }
    ];

    // Initial notification data
    const parsedNotificationData = [
      { id: "1", message: "Notification 1" },
      { id: "2", message: "Notification 2" },
      { id: "3", message: "Notification 3" }
    ];

    // Establish WebSocket connection
    const ws = new WebSocket('ws://localhost:8080');

        function sendMessageToServer(message) {
          // Check if the WebSocket connection is open
          if (ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify(message));
          } else {
            console.error('WebSocket connection is not open yet.');
          }
        }

    // WebSocket event listener
    ws.addEventListener('message', function(event) {

      console.log('Received notification:', event.data);
      let parsedNotificationData=JSON.parse(event.data)
      parsedNotificationData=parsedNotificationData.map(d=>{return {id:d._id,message:d.message}})
      console.log("parsedNotificationData....",parsedNotificationData)
      // Handle received notification here
      displayNotification(parsedNotificationData);
      updateNotificationCount(parsedNotificationData.length);
    });
    function openNewRoomPug() {
      window.location.href = "/room";
      const redirectUrl = "/room" + '?token=' + encodeURIComponent("parsedUserDetails.token")
      // Redirect the user to the new URL
      window.location.replace(redirectUrl);
    }

    function toggleProfileDetails() {
      var profileDetails = document.getElementById('profileDetails');
      profileDetails.classList.toggle('active');
    }

    function toggleNotificationCard() {
      var notificationCard = document.getElementById('notificationCard');
      if (notificationCard.style.display === 'block') {
        notificationCard.style.display = 'none';
      } else {
        notificationCard.style.display = 'block';
      }
    }

    function displayNotification(messages) {
      var notificationMessage = document.getElementById('notificationMessage');
      notificationMessage.innerHTML = ""; // Clear previous notifications
      messages.forEach(function(message) {
        var notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.textContent = message.message;
        notificationMessage.appendChild(notificationItem);
      });
    }

    function updateNotificationCount(count) {
      var notificationCount = document.getElementById('notificationCount');
      notificationCount.textContent = count;
      notificationCount.classList.toggle('active', count > 0);
    }

    // Function to create room boxes dynamically
    function createRoomBoxes() {
      const roomContainer = document.querySelector('.room-container');
      rooms.forEach(room => {
        const roomBox = document.createElement('div');
        roomBox.classList.add('room-box');
        const roomName = document.createElement('h2');
        roomName.textContent = room.name;
        const roomDescription = document.createElement('p');
        roomDescription.textContent = room.description;
        roomBox.appendChild(roomName);
        roomBox.appendChild(roomDescription);
        roomContainer.appendChild(roomBox);
      });
    }

    // Call the function to create room boxes
    createRoomBoxes();

    // Initial notification count
    updateNotificationCount(parsedNotificationData.length);

    // Hide notification card on page load
    window.addEventListener('DOMContentLoaded', function() {
      var notificationCard = document.getElementById('notificationCard');
      notificationCard.style.display = 'none';
    });